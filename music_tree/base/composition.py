class Timecode():
    """ Класс, определяющий точное местоположение на таймлайне композиции.

        Точность обеспечивается указанием доли и "дробной" части.
        Актуально для событий управляющих дорожек, предполагается,
        что события на "музыкальных" дорожках будут проецироваться на таймлайн
        с помощью точек привязки. """

    def __init__(self):
        self.beat = 0
        self.tick = 0
        pass


class Snap():

    def __init__(self):
        # в первом приближении точка привязки определяется только именем
        # и таймкодом расположения
        self.name = ""
        self.timecode = Timecode()


class Symbol():
    """ Одиночный символ в музыкальном слове """

    def __init__(self, value=0):
        # self.type = 0  # на случай не только нот
        self.value = value
        self.accent = False  # "ударение", которое сделает его точкой привязки


class Word():
    """ Одиночное "музыкальное слово" """

    # Представим себе такое: (галочкой отмечено "ударение", т.е. out_snappoint)
    # 1^ 2 3^ 1
    # Представим, что

    def __init__(self):
        self.symbols = []  # символы, из которых состоит слово
        # - только конкретные ноты, их расположение на конечном таймлайне
        # зависит от настройки точек привязки и "управляющих значений"


class Text():
    """ Класс, определяющий одну дорожку, на которой распределены события """

    def __init__(self):

        # события - список пар [cursor(start_time), event_obj]
        # TODO: именованные snappoints?! по типу функций
        # TODO: неймспейсы для snappoints? A.start, A.a.end

        self.events = []
        self.snappoints = []  # хранить только вручную добавленные,
        # те, что генерируются на лету (e.g. начало такта), хранить нет смысла

        pass


class Composition():
    """ Класс, объединяющий в себе всю информацию про композицию """

    def __init__(self):

        # управляющие дорожки:
        # - markers
        # - tempo
        # - time signature
        # - scale
        # - harmony
        # - harmony
        # - dynamics
        # - snappoints < генерируемые на основе signature плюс generic notes

        pass
